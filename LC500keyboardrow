//complexity: O(n * m) where n is the size of words and m is the length of the longest word
           // O(n) space where n is the size of the words
class Solution {
public:
    vector<string> findWords(vector<string>& words) {
        vector<string> output;
        unordered_map<char, int> rows({
                                        { 'z', 1 },
                                        { 'x', 1 },
                                        { 'c', 1 },
                                        { 'v', 1 },
                                        { 'b', 1 },
                                        { 'n', 1 },
                                        { 'm', 1 },
            
                                        { 'a', 2 },
                                        { 's', 2 },
                                        { 'd', 2 },
                                        { 'f', 2 },
                                        { 'g', 2 },
                                        { 'h', 2 },
                                        { 'j', 2 },
                                        { 'k', 2 },
                                        { 'l', 2 },
                                                    });
        int startingNum;
        for (string word: words){
            startingNum = rows[tolower(word[0])];
            bool oneRow = true;
            for (int i=1; i<word.size(); ++i){
                if (rows[tolower(word[i])] != startingNum) oneRow = false;
            }
            if (oneRow) output.push_back(word);
        }
        
        return output;
    }
};
